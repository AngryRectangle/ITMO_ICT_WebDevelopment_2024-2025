{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to \u041c\u043e\u0438 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u0430\u0445\u0438\u043a\u0430\u043b\u043e \u041a\u0438\u0440\u0438\u043b\u043b 334725 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5","title":"Welcome to \u041c\u043e\u0438 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"#welcome-to","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u0430\u0445\u0438\u043a\u0430\u043b\u043e \u041a\u0438\u0440\u0438\u043b\u043b 334725","title":"Welcome to \u041c\u043e\u0438 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"#1","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"lab1/task1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b \u0421\u0434\u0435\u043b\u0430\u043d \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u0430 C#, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0441\u043e\u043a\u0435\u0442\u044b \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e, \u0431\u0435\u0437 \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u043d\u0430\u0434\u0441\u0442\u0440\u043e\u0435\u043a, \u0447\u0442\u043e\u0431\u044b \u044d\u0442\u043e \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u043b\u043e \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0432 socket \u0432 Python. \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u0435\u0442 UDP \u0441\u043e\u043a\u0435\u0442, \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0442 \u0432\u0441\u0435\u0445 \u043a\u0442\u043e \u0438 \u0447\u0442\u043e \u0435\u043c\u0443 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442 \u0438 \u043a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \"Hello, server\" - \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \"Hello, client\". \u0423\u0447\u0442\u0435\u043d\u043e, \u0447\u0442\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0439\u0442\u0438 \u043d\u0435 \u0446\u0435\u043b\u0438\u043a\u043e\u043c \u0438 \u0443\u0439\u0442\u0438 \u0442\u043e\u0436\u0435 \u043d\u0435 \u0446\u0435\u043b\u0438\u043a\u043e\u043c. \u0414\u0440\u043e\u043f\u044b \u043f\u0430\u043a\u0435\u0442\u043e\u0432 \u043d\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0431\u044b\u043b\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u0442\u0430\u043a. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0421\u0435\u0440\u0432\u0435\u0440 using System.Collections.Concurrent; using System.Net; using System.Net.Sockets; using System.Text; namespace Server; class Program { static async Task Main(string[] args) { var listenPort = 22102; var socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp); socket.Bind(new IPEndPoint(IPAddress.Any, listenPort)); // https://stackoverflow.com/questions/38191968/c-sharp-udp-an-existing-connection-was-forcibly-closed-by-the-remote-host const int SIO_UDP_CONNRESET = -1744830452; socket.IOControl((IOControlCode)SIO_UDP_CONNRESET, new byte[] { 0, 0, 0, 0 }, null); socket.SetSocketOption(SocketOptionLevel.IP, SocketOptionName.PacketInformation, true); EndPoint client = new IPEndPoint(IPAddress.Any, listenPort); var clients = new ConcurrentDictionary<EndPoint, Connection>(); var buffer = new byte[1024]; while (true) { var received = await socket.ReceiveFromAsync(buffer, client); if (!clients.TryGetValue(received.RemoteEndPoint, out var connection)) { connection = new Connection(received.RemoteEndPoint); clients.TryAdd(received.RemoteEndPoint, connection); } var isTargetKeysFound = Receive(connection, buffer.AsSpan(0, received.ReceivedBytes)); if (!isTargetKeysFound) continue; Console.WriteLine($\"Received: {connection.ReceivedData} from {connection.Client}\"); var dataToSend = Encoding.UTF8.GetBytes(\"Hello, client\"); connection.SendingData = dataToSend; connection.SentBytes = 0; await Send(socket, connection); } } private static async Task Send(Socket socket, Connection connection) { var bufferToSend = connection.SendingData.AsMemory(connection.SentBytes, connection.SendingData.Length - connection.SentBytes); connection.SentBytes += await socket.SendToAsync(bufferToSend, connection.Client); } private static bool Receive(Connection connection, ReadOnlySpan<byte> receivedBytes) { connection.ReceivedData.Append(Encoding.UTF8.GetString(receivedBytes)); const string target = \"Hello, server\"; if (connection.ReceivedData.Length < target.Length) return false; var receivedString = connection.ReceivedData.ToString(); return receivedString.Contains(target); } private class Connection { public readonly EndPoint Client; public readonly StringBuilder ReceivedData = new(); public int SentBytes; public byte[]? SendingData; public Connection(EndPoint client) { Client = client; } } } \u041a\u043b\u0438\u0435\u043d\u0442 using System.Net; using System.Net.Sockets; using System.Text; namespace Client; class Program { public static async Task Main(string[] args) { var targetPort = 22102; var targetAddress = IPAddress.Parse(\"127.0.0.1\"); var socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp); var targetEndPoint = new IPEndPoint(targetAddress, targetPort); var dataToSend = Encoding.UTF8.GetBytes(\"Hello, server\"); var sentBytes = 0; var receivedBytes = new byte[1024]; var receivedBytesCount = 0; while (true) { try { // \u041f\u043e\u043a\u0430 \u043d\u0435\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0448\u043b\u0451\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441\u043d\u043e\u0432\u0430 if (receivedBytesCount == 0) { sentBytes += await socket.SendToAsync(dataToSend.AsMemory(sentBytes, dataToSend.Length - sentBytes), targetEndPoint); if (sentBytes == dataToSend.Length) sentBytes = 0; } try { var newlyReceived = await socket.ReceiveAsync(receivedBytes); Console.WriteLine(\"Received from server:\"); Console.Write(Encoding.UTF8.GetString(receivedBytes, receivedBytesCount, newlyReceived)); receivedBytesCount += newlyReceived; } catch (SocketException e) { if (e.SocketErrorCode == SocketError.TimedOut) { Console.WriteLine(\"Server is not responding, trying to send message again.\"); } else { Console.WriteLine(e); } } } catch (Exception e) { Console.WriteLine(e); } } } }","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"lab1/task1/#1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"lab1/task1/#_1","text":"\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP.","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"lab1/task1/#_2","text":"\u0421\u0434\u0435\u043b\u0430\u043d \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u0430 C#, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0441\u043e\u043a\u0435\u0442\u044b \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e, \u0431\u0435\u0437 \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u043d\u0430\u0434\u0441\u0442\u0440\u043e\u0435\u043a, \u0447\u0442\u043e\u0431\u044b \u044d\u0442\u043e \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u043b\u043e \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0432 socket \u0432 Python. \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u0435\u0442 UDP \u0441\u043e\u043a\u0435\u0442, \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043e\u0442 \u0432\u0441\u0435\u0445 \u043a\u0442\u043e \u0438 \u0447\u0442\u043e \u0435\u043c\u0443 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442 \u0438 \u043a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \"Hello, server\" - \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \"Hello, client\". \u0423\u0447\u0442\u0435\u043d\u043e, \u0447\u0442\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0439\u0442\u0438 \u043d\u0435 \u0446\u0435\u043b\u0438\u043a\u043e\u043c \u0438 \u0443\u0439\u0442\u0438 \u0442\u043e\u0436\u0435 \u043d\u0435 \u0446\u0435\u043b\u0438\u043a\u043e\u043c. \u0414\u0440\u043e\u043f\u044b \u043f\u0430\u043a\u0435\u0442\u043e\u0432 \u043d\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0431\u044b\u043b\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u0442\u0430\u043a.","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab1/task1/#_3","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430"},{"location":"lab1/task1/#_4","text":"using System.Collections.Concurrent; using System.Net; using System.Net.Sockets; using System.Text; namespace Server; class Program { static async Task Main(string[] args) { var listenPort = 22102; var socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp); socket.Bind(new IPEndPoint(IPAddress.Any, listenPort)); // https://stackoverflow.com/questions/38191968/c-sharp-udp-an-existing-connection-was-forcibly-closed-by-the-remote-host const int SIO_UDP_CONNRESET = -1744830452; socket.IOControl((IOControlCode)SIO_UDP_CONNRESET, new byte[] { 0, 0, 0, 0 }, null); socket.SetSocketOption(SocketOptionLevel.IP, SocketOptionName.PacketInformation, true); EndPoint client = new IPEndPoint(IPAddress.Any, listenPort); var clients = new ConcurrentDictionary<EndPoint, Connection>(); var buffer = new byte[1024]; while (true) { var received = await socket.ReceiveFromAsync(buffer, client); if (!clients.TryGetValue(received.RemoteEndPoint, out var connection)) { connection = new Connection(received.RemoteEndPoint); clients.TryAdd(received.RemoteEndPoint, connection); } var isTargetKeysFound = Receive(connection, buffer.AsSpan(0, received.ReceivedBytes)); if (!isTargetKeysFound) continue; Console.WriteLine($\"Received: {connection.ReceivedData} from {connection.Client}\"); var dataToSend = Encoding.UTF8.GetBytes(\"Hello, client\"); connection.SendingData = dataToSend; connection.SentBytes = 0; await Send(socket, connection); } } private static async Task Send(Socket socket, Connection connection) { var bufferToSend = connection.SendingData.AsMemory(connection.SentBytes, connection.SendingData.Length - connection.SentBytes); connection.SentBytes += await socket.SendToAsync(bufferToSend, connection.Client); } private static bool Receive(Connection connection, ReadOnlySpan<byte> receivedBytes) { connection.ReceivedData.Append(Encoding.UTF8.GetString(receivedBytes)); const string target = \"Hello, server\"; if (connection.ReceivedData.Length < target.Length) return false; var receivedString = connection.ReceivedData.ToString(); return receivedString.Contains(target); } private class Connection { public readonly EndPoint Client; public readonly StringBuilder ReceivedData = new(); public int SentBytes; public byte[]? SendingData; public Connection(EndPoint client) { Client = client; } } }","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"lab1/task1/#_5","text":"using System.Net; using System.Net.Sockets; using System.Text; namespace Client; class Program { public static async Task Main(string[] args) { var targetPort = 22102; var targetAddress = IPAddress.Parse(\"127.0.0.1\"); var socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp); var targetEndPoint = new IPEndPoint(targetAddress, targetPort); var dataToSend = Encoding.UTF8.GetBytes(\"Hello, server\"); var sentBytes = 0; var receivedBytes = new byte[1024]; var receivedBytesCount = 0; while (true) { try { // \u041f\u043e\u043a\u0430 \u043d\u0435\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0448\u043b\u0451\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441\u043d\u043e\u0432\u0430 if (receivedBytesCount == 0) { sentBytes += await socket.SendToAsync(dataToSend.AsMemory(sentBytes, dataToSend.Length - sentBytes), targetEndPoint); if (sentBytes == dataToSend.Length) sentBytes = 0; } try { var newlyReceived = await socket.ReceiveAsync(receivedBytes); Console.WriteLine(\"Received from server:\"); Console.Write(Encoding.UTF8.GetString(receivedBytes, receivedBytesCount, newlyReceived)); receivedBytesCount += newlyReceived; } catch (SocketException e) { if (e.SocketErrorCode == SocketError.TimedOut) { Console.WriteLine(\"Server is not responding, trying to send message again.\"); } else { Console.WriteLine(e); } } } catch (Exception e) { Console.WriteLine(e); } } } }","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"lab1/task2/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430. \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u0431\u043e\u0440\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430: \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u043e\u043c\u0443 \u043d\u043e\u043c\u0435\u0440\u0443 \u0432 \u0436\u0443\u0440\u043d\u0430\u043b\u0435 (\u043f\u044f\u0442\u044b\u0439 \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 1 \u0438 \u0442.\u0434.). \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b \u041c\u043e\u0439 \u043d\u043e\u043c\u0435\u0440 21, \u043c\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 1. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430. \u0412 \u043d\u0430\u0447\u0430\u043b\u0435 \u0432\u0441\u0451 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b \u043a\u0430\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438, \u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043c \u043f\u043e\u043d\u044f\u043b, \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435 \u043d\u0430 UDP, \u0430 \u043d\u0430 TCP. \u0421\u0430\u043c\u044b\u043c \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044f\u0434\u0440\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u0445 TCP \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u0439 3,4,5. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u044f \u0440\u0435\u0448\u0438\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0438 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044f\u0434\u0440\u0430 \u0435\u0441\u0442\u044c \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438. \u0412\u043e\u0442 \u043a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e \u043a \u044d\u0442\u043e\u043c\u0443 \u0437\u0430\u0434\u0430\u043d\u0438\u044e: webServer.RegisterRouteGet(\"/math\", async arguments => { if (!arguments.TryGetValue(\"a\", out var aRaw) || !int.TryParse(aRaw, out var a)) return new HttpResponse(\"\", HttpResponse.Type.BadRequest); if (!arguments.TryGetValue(\"b\", out var bRaw) || !int.TryParse(bRaw, out var b)) return new HttpResponse(\"\", HttpResponse.Type.BadRequest); var cValue = (float)Math.Sqrt(a * a + b * b); return new HttpResponse(cValue.ToString(), HttpResponse.Type.Success); }); \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442, \u043a\u0430\u043a \u043d\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0435 HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u041d\u043e \u0432\u0441\u0451 \u044d\u0442\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u0445 \u0433\u043e\u043b\u043e\u0433\u043e \u0441\u043e\u043a\u0435\u0442\u0430, \u0447\u0442\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u0438\u0442\u043e\u043d\u043e\u0432\u0441\u043a\u043e\u043c\u0443 socket \u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0421\u0435\u0440\u0432\u0435\u0440 using System.Net; using System.Net.Sockets; using System.Text; namespace Server; class Program { static async Task Main(string[] args) { var listenPort = 22102; var socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp); socket.Bind(new IPEndPoint(IPAddress.Any, listenPort)); socket.Listen(10); var webServer = new WebServer(socket); webServer.RegisterRouteGet(\"/math\", async arguments => { if (!arguments.TryGetValue(\"a\", out var aRaw) || !int.TryParse(aRaw, out var a)) return new HttpResponse(\"\", HttpResponse.Type.BadRequest); if (!arguments.TryGetValue(\"b\", out var bRaw) || !int.TryParse(bRaw, out var b)) return new HttpResponse(\"\", HttpResponse.Type.BadRequest); var cValue = (float)Math.Sqrt(a * a + b * b); return new HttpResponse(cValue.ToString(), HttpResponse.Type.Success); }); while (true) { webServer.PollConnection(); webServer.PollRequests(); webServer.PollRequestProcessing(); } } private class WebServer { private readonly Socket _socket; private readonly Dictionary<EndPoint, Connection> _connections = new(); private readonly Dictionary<string, Func<Dictionary<string, string>, Task<HttpResponse>>> _routeHandlersGet = new(); private readonly Dictionary<string, Func<Dictionary<string, string>, Task<HttpResponse>>> _routeHandlersPost = new(); private bool _isWaitingForConnection; public WebServer(Socket socket) { _socket = socket; } public void PollConnection() { if (_isWaitingForConnection) return; _isWaitingForConnection = true; var socketAsyncEventArgs = new SocketAsyncEventArgs(); socketAsyncEventArgs.Completed += OnAccept; var isAsync = _socket.AcceptAsync(socketAsyncEventArgs); if (!isAsync) OnAccept(null, socketAsyncEventArgs); } public void PollRequests() { foreach (var connection in _connections.ToArray()) { var receivingTask = connection.Value.ReceivingTask; if (receivingTask is null) { receivingTask = connection.Value.Client.ReceiveAsync(connection.Value.Buffer); connection.Value.ReceivingTask = receivingTask; continue; } if (!receivingTask.IsCompleted) continue; connection.Value.ReceivingTask = null; try { try { var receivedBytesCount = receivingTask.Result; connection.Value.FlushToStream(receivedBytesCount); } catch (AggregateException e) { throw e.InnerException!; } } catch (SocketException e) { if (e.SocketErrorCode != SocketError.ConnectionReset) Console.WriteLine(e); connection.Value.Dispose(); _connections.Remove(connection.Key); } catch (Exception e) { Console.WriteLine(e); connection.Value.Dispose(); _connections.Remove(connection.Key); } } } public void PollRequestProcessing() { foreach (var connection in _connections.ToArray()) { var requestProcessingTask = connection.Value.RequestProcessingTask; if (requestProcessingTask is null) { connection.Value.RequestProcessingTask = ProcessRequest(connection.Value.RequestReader); continue; } if (!requestProcessingTask.IsCompleted) continue; connection.Value.RequestProcessingTask = null; connection.Value.ResetBuffer(); try { var response = requestProcessingTask.Result; connection.Value.Client.Send(response); } catch (Exception e) { Console.WriteLine(e); connection.Value.Dispose(); _connections.Remove(connection.Key); } } } public void RegisterRouteGet(string route, Func<Dictionary<string, string>, Task<HttpResponse>> handler) { _routeHandlersGet.Add(route, handler); } public void RegisterRoutePost(string route, Func<Dictionary<string, string>, Task<HttpResponse>> handler) { _routeHandlersPost.Add(route, handler); } private void OnAccept(object? sender, SocketAsyncEventArgs e) { if (e.SocketError != SocketError.Success) { Console.WriteLine(e.SocketError); return; } if (e.AcceptSocket == null) { Console.WriteLine(\"Accept socket is null\"); return; } var connection = new Connection(e.AcceptSocket); _connections.Add(connection.Client.RemoteEndPoint, connection); _isWaitingForConnection = false; } private async Task<byte[]> ProcessRequest(StreamReader connectionRequestReader) { var firstLine = await connectionRequestReader.ReadLineAsync(); if (firstLine == null) return Encoding.ASCII.GetBytes(\"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\"); var requestParts = firstLine.Split(' '); if (requestParts.Length != 3 || (requestParts[0] != \"GET\" && requestParts[0] != \"POST\")) return Encoding.ASCII.GetBytes(\"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\"); var pathAndArguments = requestParts[1].Split('?'); var path = pathAndArguments[0]; var headers = new List<string>(); var maxHeadersCount = 100; while (maxHeadersCount-- > 0) { var header = await connectionRequestReader.ReadLineAsync(); if (string.IsNullOrEmpty(header)) break; headers.Add(header); } if (maxHeadersCount == 0) return Encoding.ASCII.GetBytes(\"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\"); Func<Dictionary<string, string>, Task<HttpResponse>> handler = null; if (requestParts[0] == \"GET\" && !_routeHandlersGet.TryGetValue(path, out handler)) return Encoding.ASCII.GetBytes(\"HTTP/1.1 404 Not Found\\r\\nContent-Length: 0\\r\\n\\r\\n\"); if (requestParts[0] == \"POST\" && !_routeHandlersPost.TryGetValue(path, out handler)) return Encoding.ASCII.GetBytes(\"HTTP/1.1 404 Not Found\\r\\nContent-Length: 0\\r\\n\\r\\n\"); var argumentsRaw = pathAndArguments.Length > 1 ? pathAndArguments[1] : \"\"; var arguments = argumentsRaw.Split('&') .Where(e => !string.IsNullOrWhiteSpace(e)).Select(x => x.Split('=')) .ToDictionary(x => x[0], x => x[1]); try { Console.WriteLine($\"Processing request: {path} with method {requestParts[0]}\"); var response = await handler(arguments); return Encoding.ASCII.GetBytes( $\"HTTP/1.1 {response.GetStatusString()}\\r\\nContent-Length: {response.Content.Length}\\r\\n\\r\\n{response.Content}\"); } catch (Exception e) { Console.WriteLine(e); return Encoding.ASCII.GetBytes(\"HTTP/1.1 500 Internal Server Error\\r\\nContent-Length: 0\\r\\n\\r\\n\"); } } } private class Connection : IDisposable { public readonly Socket Client; public readonly byte[] Buffer = new byte[1024 * 8]; public readonly StreamReader RequestReader; public Task<int> ReceivingTask; public Task<byte[]> RequestProcessingTask; public int ReceivedBytesCount { get; private set; } private readonly ProducerConsumerStream _receivedStream; public Connection(Socket client) { Client = client; _receivedStream = new ProducerConsumerStream(); RequestReader = new StreamReader(_receivedStream, Encoding.ASCII); } public void FlushToStream(int count) { ReceivedBytesCount += count; _receivedStream.Write(Buffer, 0, count); _receivedStream.Flush(); } public void ResetBuffer() { Array.Clear(Buffer, 0, Buffer.Length); _receivedStream.Flush(); } public void Dispose() { try { Client.Dispose(); } catch (SocketException) { } } } public class HttpResponse { public string Content { get; } public Type Status { get; } public HttpResponse(string content, Type status) { Content = content; Status = status; } public string GetStatusString() { return Status switch { Type.Success => \"200 OK\", Type.BadRequest => \"400 Bad Request\", Type.NotFound => \"404 Not Found\", Type.InternalServerError => \"500 Internal Server Error\", _ => throw new ArgumentOutOfRangeException() }; } public enum Type { Success, BadRequest, NotFound, InternalServerError } } } \u041a\u043b\u0438\u0435\u043d\u0442 using System.Net; using System.Net.Sockets; using System.Text; namespace Client; class Program { public static async Task Main(string[] args) { var targetPort = 22102; var targetAddress = IPAddress.Parse(\"127.0.0.1\"); var socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp); var targetEndPoint = new IPEndPoint(targetAddress, targetPort); var a = 0; var b = 0; Console.WriteLine(\"Write a and b of equation a^2 + b^2 = c^2 to get c:\"); var aB = Console.ReadLine().Split(' '); if (aB.Length != 2 || !int.TryParse(aB[0], out a) || !int.TryParse(aB[1], out b)) { Console.WriteLine(\"Invalid input, exiting.\"); return; } var url = $\"http://127.0.0.1:22102/math?a={a}&b={b}\"; using var client = new HttpClient(); try { var response = await client.GetAsync(url); var resultString = await response.Content.ReadAsStringAsync(); if (float.TryParse(resultString, out float c)) Console.WriteLine($\"The value of c is: {c}\"); else Console.WriteLine(\"Failed to parse the response as a float.\"); } catch (Exception ex) { Console.WriteLine($\"An error occurred: {ex.Message}.\"); } } }","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"lab1/task2/#2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430. \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u0431\u043e\u0440\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430: \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u043e\u043c\u0443 \u043d\u043e\u043c\u0435\u0440\u0443 \u0432 \u0436\u0443\u0440\u043d\u0430\u043b\u0435 (\u043f\u044f\u0442\u044b\u0439 \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 1 \u0438 \u0442.\u0434.).","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"lab1/task2/#_1","text":"\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP.","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"lab1/task2/#_2","text":"\u041c\u043e\u0439 \u043d\u043e\u043c\u0435\u0440 21, \u043c\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 1. \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430. \u0412 \u043d\u0430\u0447\u0430\u043b\u0435 \u0432\u0441\u0451 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b \u043a\u0430\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438, \u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043c \u043f\u043e\u043d\u044f\u043b, \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435 \u043d\u0430 UDP, \u0430 \u043d\u0430 TCP. \u0421\u0430\u043c\u044b\u043c \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044f\u0434\u0440\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u0445 TCP \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u0439 3,4,5. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u044f \u0440\u0435\u0448\u0438\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0438 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044f\u0434\u0440\u0430 \u0435\u0441\u0442\u044c \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438. \u0412\u043e\u0442 \u043a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e \u043a \u044d\u0442\u043e\u043c\u0443 \u0437\u0430\u0434\u0430\u043d\u0438\u044e: webServer.RegisterRouteGet(\"/math\", async arguments => { if (!arguments.TryGetValue(\"a\", out var aRaw) || !int.TryParse(aRaw, out var a)) return new HttpResponse(\"\", HttpResponse.Type.BadRequest); if (!arguments.TryGetValue(\"b\", out var bRaw) || !int.TryParse(bRaw, out var b)) return new HttpResponse(\"\", HttpResponse.Type.BadRequest); var cValue = (float)Math.Sqrt(a * a + b * b); return new HttpResponse(cValue.ToString(), HttpResponse.Type.Success); }); \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442, \u043a\u0430\u043a \u043d\u0430 \u043e\u0431\u044b\u0447\u043d\u044b\u0435 HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u041d\u043e \u0432\u0441\u0451 \u044d\u0442\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u0445 \u0433\u043e\u043b\u043e\u0433\u043e \u0441\u043e\u043a\u0435\u0442\u0430, \u0447\u0442\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u0438\u0442\u043e\u043d\u043e\u0432\u0441\u043a\u043e\u043c\u0443 socket \u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP.","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab1/task2/#_3","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430"},{"location":"lab1/task2/#_4","text":"using System.Net; using System.Net.Sockets; using System.Text; namespace Server; class Program { static async Task Main(string[] args) { var listenPort = 22102; var socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp); socket.Bind(new IPEndPoint(IPAddress.Any, listenPort)); socket.Listen(10); var webServer = new WebServer(socket); webServer.RegisterRouteGet(\"/math\", async arguments => { if (!arguments.TryGetValue(\"a\", out var aRaw) || !int.TryParse(aRaw, out var a)) return new HttpResponse(\"\", HttpResponse.Type.BadRequest); if (!arguments.TryGetValue(\"b\", out var bRaw) || !int.TryParse(bRaw, out var b)) return new HttpResponse(\"\", HttpResponse.Type.BadRequest); var cValue = (float)Math.Sqrt(a * a + b * b); return new HttpResponse(cValue.ToString(), HttpResponse.Type.Success); }); while (true) { webServer.PollConnection(); webServer.PollRequests(); webServer.PollRequestProcessing(); } } private class WebServer { private readonly Socket _socket; private readonly Dictionary<EndPoint, Connection> _connections = new(); private readonly Dictionary<string, Func<Dictionary<string, string>, Task<HttpResponse>>> _routeHandlersGet = new(); private readonly Dictionary<string, Func<Dictionary<string, string>, Task<HttpResponse>>> _routeHandlersPost = new(); private bool _isWaitingForConnection; public WebServer(Socket socket) { _socket = socket; } public void PollConnection() { if (_isWaitingForConnection) return; _isWaitingForConnection = true; var socketAsyncEventArgs = new SocketAsyncEventArgs(); socketAsyncEventArgs.Completed += OnAccept; var isAsync = _socket.AcceptAsync(socketAsyncEventArgs); if (!isAsync) OnAccept(null, socketAsyncEventArgs); } public void PollRequests() { foreach (var connection in _connections.ToArray()) { var receivingTask = connection.Value.ReceivingTask; if (receivingTask is null) { receivingTask = connection.Value.Client.ReceiveAsync(connection.Value.Buffer); connection.Value.ReceivingTask = receivingTask; continue; } if (!receivingTask.IsCompleted) continue; connection.Value.ReceivingTask = null; try { try { var receivedBytesCount = receivingTask.Result; connection.Value.FlushToStream(receivedBytesCount); } catch (AggregateException e) { throw e.InnerException!; } } catch (SocketException e) { if (e.SocketErrorCode != SocketError.ConnectionReset) Console.WriteLine(e); connection.Value.Dispose(); _connections.Remove(connection.Key); } catch (Exception e) { Console.WriteLine(e); connection.Value.Dispose(); _connections.Remove(connection.Key); } } } public void PollRequestProcessing() { foreach (var connection in _connections.ToArray()) { var requestProcessingTask = connection.Value.RequestProcessingTask; if (requestProcessingTask is null) { connection.Value.RequestProcessingTask = ProcessRequest(connection.Value.RequestReader); continue; } if (!requestProcessingTask.IsCompleted) continue; connection.Value.RequestProcessingTask = null; connection.Value.ResetBuffer(); try { var response = requestProcessingTask.Result; connection.Value.Client.Send(response); } catch (Exception e) { Console.WriteLine(e); connection.Value.Dispose(); _connections.Remove(connection.Key); } } } public void RegisterRouteGet(string route, Func<Dictionary<string, string>, Task<HttpResponse>> handler) { _routeHandlersGet.Add(route, handler); } public void RegisterRoutePost(string route, Func<Dictionary<string, string>, Task<HttpResponse>> handler) { _routeHandlersPost.Add(route, handler); } private void OnAccept(object? sender, SocketAsyncEventArgs e) { if (e.SocketError != SocketError.Success) { Console.WriteLine(e.SocketError); return; } if (e.AcceptSocket == null) { Console.WriteLine(\"Accept socket is null\"); return; } var connection = new Connection(e.AcceptSocket); _connections.Add(connection.Client.RemoteEndPoint, connection); _isWaitingForConnection = false; } private async Task<byte[]> ProcessRequest(StreamReader connectionRequestReader) { var firstLine = await connectionRequestReader.ReadLineAsync(); if (firstLine == null) return Encoding.ASCII.GetBytes(\"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\"); var requestParts = firstLine.Split(' '); if (requestParts.Length != 3 || (requestParts[0] != \"GET\" && requestParts[0] != \"POST\")) return Encoding.ASCII.GetBytes(\"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\"); var pathAndArguments = requestParts[1].Split('?'); var path = pathAndArguments[0]; var headers = new List<string>(); var maxHeadersCount = 100; while (maxHeadersCount-- > 0) { var header = await connectionRequestReader.ReadLineAsync(); if (string.IsNullOrEmpty(header)) break; headers.Add(header); } if (maxHeadersCount == 0) return Encoding.ASCII.GetBytes(\"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\"); Func<Dictionary<string, string>, Task<HttpResponse>> handler = null; if (requestParts[0] == \"GET\" && !_routeHandlersGet.TryGetValue(path, out handler)) return Encoding.ASCII.GetBytes(\"HTTP/1.1 404 Not Found\\r\\nContent-Length: 0\\r\\n\\r\\n\"); if (requestParts[0] == \"POST\" && !_routeHandlersPost.TryGetValue(path, out handler)) return Encoding.ASCII.GetBytes(\"HTTP/1.1 404 Not Found\\r\\nContent-Length: 0\\r\\n\\r\\n\"); var argumentsRaw = pathAndArguments.Length > 1 ? pathAndArguments[1] : \"\"; var arguments = argumentsRaw.Split('&') .Where(e => !string.IsNullOrWhiteSpace(e)).Select(x => x.Split('=')) .ToDictionary(x => x[0], x => x[1]); try { Console.WriteLine($\"Processing request: {path} with method {requestParts[0]}\"); var response = await handler(arguments); return Encoding.ASCII.GetBytes( $\"HTTP/1.1 {response.GetStatusString()}\\r\\nContent-Length: {response.Content.Length}\\r\\n\\r\\n{response.Content}\"); } catch (Exception e) { Console.WriteLine(e); return Encoding.ASCII.GetBytes(\"HTTP/1.1 500 Internal Server Error\\r\\nContent-Length: 0\\r\\n\\r\\n\"); } } } private class Connection : IDisposable { public readonly Socket Client; public readonly byte[] Buffer = new byte[1024 * 8]; public readonly StreamReader RequestReader; public Task<int> ReceivingTask; public Task<byte[]> RequestProcessingTask; public int ReceivedBytesCount { get; private set; } private readonly ProducerConsumerStream _receivedStream; public Connection(Socket client) { Client = client; _receivedStream = new ProducerConsumerStream(); RequestReader = new StreamReader(_receivedStream, Encoding.ASCII); } public void FlushToStream(int count) { ReceivedBytesCount += count; _receivedStream.Write(Buffer, 0, count); _receivedStream.Flush(); } public void ResetBuffer() { Array.Clear(Buffer, 0, Buffer.Length); _receivedStream.Flush(); } public void Dispose() { try { Client.Dispose(); } catch (SocketException) { } } } public class HttpResponse { public string Content { get; } public Type Status { get; } public HttpResponse(string content, Type status) { Content = content; Status = status; } public string GetStatusString() { return Status switch { Type.Success => \"200 OK\", Type.BadRequest => \"400 Bad Request\", Type.NotFound => \"404 Not Found\", Type.InternalServerError => \"500 Internal Server Error\", _ => throw new ArgumentOutOfRangeException() }; } public enum Type { Success, BadRequest, NotFound, InternalServerError } } }","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"lab1/task2/#_5","text":"using System.Net; using System.Net.Sockets; using System.Text; namespace Client; class Program { public static async Task Main(string[] args) { var targetPort = 22102; var targetAddress = IPAddress.Parse(\"127.0.0.1\"); var socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp); var targetEndPoint = new IPEndPoint(targetAddress, targetPort); var a = 0; var b = 0; Console.WriteLine(\"Write a and b of equation a^2 + b^2 = c^2 to get c:\"); var aB = Console.ReadLine().Split(' '); if (aB.Length != 2 || !int.TryParse(aB[0], out a) || !int.TryParse(aB[1], out b)) { Console.WriteLine(\"Invalid input, exiting.\"); return; } var url = $\"http://127.0.0.1:22102/math?a={a}&b={b}\"; using var client = new HttpClient(); try { var response = await client.GetAsync(url); var resultString = await response.Content.ReadAsStringAsync(); if (float.TryParse(resultString, out float c)) Console.WriteLine($\"The value of c is: {c}\"); else Console.WriteLine(\"Failed to parse the response as a float.\"); } catch (Exception ex) { Console.WriteLine($\"An error occurred: {ex.Message}.\"); } } }","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"lab1/task3/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0434\u0435\u0441\u044c \u043d\u0435 \u043d\u0443\u0436\u0435\u043d, \u0442\u0430\u043a \u043a\u0430\u043a \u0432 \u0435\u0433\u043e \u0440\u043e\u043b\u0438 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0432\u0441\u0451, \u0447\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, Postman. \u0417\u0434\u0435\u0441\u044c \u044f \u0441\u0434\u0435\u043b\u0430\u043b \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043c\u0438\u043d\u0438-\u044f\u0434\u0440\u043e \u0434\u043b\u044f http \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u044f \u043f\u043e \u0438\u0442\u043e\u0433\u0443 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b 3, 4 \u0438 5 \u0437\u0430\u0434\u0430\u043d\u0438\u044f. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0437 url \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u0442\u0443\u0434\u0430, \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u0440\u0430\u0437\u043d\u044b\u043c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430\u043c \u043f\u043e \u0440\u0430\u0437\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u0430\u043c (\u0442\u043e\u043b\u044c\u043a\u043e Get \u0438 Post), \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u0441 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u043c\u0438 \u0441\u0442\u0430\u0442\u0443\u0441 \u043a\u043e\u0434\u0430\u043c\u0438. \u041a\u0440\u043e\u043c\u0435 \u043a\u043e\u0434\u0430 \u044f\u0434\u0440\u0430 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u043b\u043e\u0441\u044c \u0442\u043e\u043b\u044c\u043a\u043e: webServer.RegisterRouteGet(\"/index.html\", async arguments => { return new HttpResponse(await File.ReadAllTextAsync(\"index.html\"), HttpResponse.Type.Success); }); \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 using System.Net; using System.Net.Sockets; using System.Text; namespace Server; class Program { static async Task Main(string[] args) { var listenPort = 22102; var socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp); socket.Bind(new IPEndPoint(IPAddress.Any, listenPort)); socket.Listen(10); var webServer = new WebServer(socket); webServer.RegisterRouteGet(\"/index.html\", async arguments => { return new HttpResponse(await File.ReadAllTextAsync(\"index.html\"), HttpResponse.Type.Success); }); while (true) { webServer.PollConnection(); webServer.PollRequests(); webServer.PollRequestProcessing(); } } private class WebServer { private readonly Socket _socket; private readonly Dictionary<EndPoint, Connection> _connections = new(); private readonly Dictionary<string, Func<Dictionary<string, string>, Task<HttpResponse>>> _routeHandlersGet = new(); private readonly Dictionary<string, Func<Dictionary<string, string>, Task<HttpResponse>>> _routeHandlersPost = new(); private bool _isWaitingForConnection; public WebServer(Socket socket) { _socket = socket; } public void PollConnection() { if (_isWaitingForConnection) return; _isWaitingForConnection = true; var socketAsyncEventArgs = new SocketAsyncEventArgs(); socketAsyncEventArgs.Completed += OnAccept; var isAsync = _socket.AcceptAsync(socketAsyncEventArgs); if (!isAsync) OnAccept(null, socketAsyncEventArgs); } public void PollRequests() { foreach (var connection in _connections.ToArray()) { var receivingTask = connection.Value.ReceivingTask; if (receivingTask is null) { receivingTask = connection.Value.Client.ReceiveAsync(connection.Value.Buffer); connection.Value.ReceivingTask = receivingTask; continue; } if (!receivingTask.IsCompleted) continue; connection.Value.ReceivingTask = null; try { try { var receivedBytesCount = receivingTask.Result; connection.Value.FlushToStream(receivedBytesCount); } catch (AggregateException e) { throw e.InnerException!; } } catch (SocketException e) { if (e.SocketErrorCode != SocketError.ConnectionReset) Console.WriteLine(e); connection.Value.Dispose(); _connections.Remove(connection.Key); } catch (Exception e) { Console.WriteLine(e); connection.Value.Dispose(); _connections.Remove(connection.Key); } } } public void PollRequestProcessing() { foreach (var connection in _connections.ToArray()) { var requestProcessingTask = connection.Value.RequestProcessingTask; if (requestProcessingTask is null) { connection.Value.RequestProcessingTask = ProcessRequest(connection.Value.RequestReader); continue; } if (!requestProcessingTask.IsCompleted) continue; connection.Value.RequestProcessingTask = null; connection.Value.ResetBuffer(); try { var response = requestProcessingTask.Result; connection.Value.Client.Send(response); } catch (Exception e) { Console.WriteLine(e); connection.Value.Dispose(); _connections.Remove(connection.Key); } } } public void RegisterRouteGet(string route, Func<Dictionary<string, string>, Task<HttpResponse>> handler) { _routeHandlersGet.Add(route, handler); } public void RegisterRoutePost(string route, Func<Dictionary<string, string>, Task<HttpResponse>> handler) { _routeHandlersPost.Add(route, handler); } private void OnAccept(object? sender, SocketAsyncEventArgs e) { if (e.SocketError != SocketError.Success) { Console.WriteLine(e.SocketError); return; } if (e.AcceptSocket == null) { Console.WriteLine(\"Accept socket is null\"); return; } var connection = new Connection(e.AcceptSocket); _connections.Add(connection.Client.RemoteEndPoint, connection); _isWaitingForConnection = false; } private async Task<byte[]> ProcessRequest(StreamReader connectionRequestReader) { var firstLine = await connectionRequestReader.ReadLineAsync(); if (firstLine == null) return Encoding.ASCII.GetBytes(\"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\"); var requestParts = firstLine.Split(' '); if (requestParts.Length != 3 || (requestParts[0] != \"GET\" && requestParts[0] != \"POST\")) return Encoding.ASCII.GetBytes(\"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\"); var pathAndArguments = requestParts[1].Split('?'); var path = pathAndArguments[0]; var headers = new List<string>(); var maxHeadersCount = 100; while (maxHeadersCount-- > 0) { var header = await connectionRequestReader.ReadLineAsync(); if (string.IsNullOrEmpty(header)) break; headers.Add(header); } if (maxHeadersCount == 0) return Encoding.ASCII.GetBytes(\"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\"); Func<Dictionary<string, string>, Task<HttpResponse>> handler = null; if (requestParts[0] == \"GET\" && !_routeHandlersGet.TryGetValue(path, out handler)) return Encoding.ASCII.GetBytes(\"HTTP/1.1 404 Not Found\\r\\nContent-Length: 0\\r\\n\\r\\n\"); if (requestParts[0] == \"POST\" && !_routeHandlersPost.TryGetValue(path, out handler)) return Encoding.ASCII.GetBytes(\"HTTP/1.1 404 Not Found\\r\\nContent-Length: 0\\r\\n\\r\\n\"); var argumentsRaw = pathAndArguments.Length > 1 ? pathAndArguments[1] : \"\"; var arguments = argumentsRaw.Split('&') .Where(e => !string.IsNullOrWhiteSpace(e)).Select(x => x.Split('=')) .ToDictionary(x => x[0], x => x[1]); try { Console.WriteLine($\"Processing request: {path} with method {requestParts[0]}\"); var response = await handler(arguments); return Encoding.ASCII.GetBytes( $\"HTTP/1.1 {response.GetStatusString()}\\r\\nContent-Length: {response.Content.Length}\\r\\n\\r\\n{response.Content}\"); } catch (Exception e) { Console.WriteLine(e); return Encoding.ASCII.GetBytes(\"HTTP/1.1 500 Internal Server Error\\r\\nContent-Length: 0\\r\\n\\r\\n\"); } } } private class Connection : IDisposable { public readonly Socket Client; public readonly byte[] Buffer = new byte[1024 * 8]; public readonly StreamReader RequestReader; public Task<int> ReceivingTask; public Task<byte[]> RequestProcessingTask; public int ReceivedBytesCount { get; private set; } private readonly ProducerConsumerStream _receivedStream; public Connection(Socket client) { Client = client; _receivedStream = new ProducerConsumerStream(); RequestReader = new StreamReader(_receivedStream, Encoding.ASCII); } public void FlushToStream(int count) { ReceivedBytesCount += count; _receivedStream.Write(Buffer, 0, count); _receivedStream.Flush(); } public void ResetBuffer() { Array.Clear(Buffer, 0, Buffer.Length); _receivedStream.Flush(); } public void Dispose() { try { Client.Dispose(); } catch (SocketException) { } } } public class HttpResponse { public string Content { get; } public Type Status { get; } public HttpResponse(string content, Type status) { Content = content; Status = status; } public string GetStatusString() { return Status switch { Type.Success => \"200 OK\", Type.BadRequest => \"400 Bad Request\", Type.NotFound => \"404 Not Found\", Type.InternalServerError => \"500 Internal Server Error\", _ => throw new ArgumentOutOfRangeException() }; } public enum Type { Success, BadRequest, NotFound, InternalServerError } } }","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"lab1/task3/#3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"lab1/task3/#_1","text":"\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"lab1/task3/#_2","text":"\u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0434\u0435\u0441\u044c \u043d\u0435 \u043d\u0443\u0436\u0435\u043d, \u0442\u0430\u043a \u043a\u0430\u043a \u0432 \u0435\u0433\u043e \u0440\u043e\u043b\u0438 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0432\u0441\u0451, \u0447\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, Postman. \u0417\u0434\u0435\u0441\u044c \u044f \u0441\u0434\u0435\u043b\u0430\u043b \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043c\u0438\u043d\u0438-\u044f\u0434\u0440\u043e \u0434\u043b\u044f http \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u044f \u043f\u043e \u0438\u0442\u043e\u0433\u0443 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b 3, 4 \u0438 5 \u0437\u0430\u0434\u0430\u043d\u0438\u044f. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0437 url \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u0442\u0443\u0434\u0430, \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u0440\u0430\u0437\u043d\u044b\u043c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430\u043c \u043f\u043e \u0440\u0430\u0437\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u0430\u043c (\u0442\u043e\u043b\u044c\u043a\u043e Get \u0438 Post), \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u0441 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u043c\u0438 \u0441\u0442\u0430\u0442\u0443\u0441 \u043a\u043e\u0434\u0430\u043c\u0438. \u041a\u0440\u043e\u043c\u0435 \u043a\u043e\u0434\u0430 \u044f\u0434\u0440\u0430 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u043b\u043e\u0441\u044c \u0442\u043e\u043b\u044c\u043a\u043e: webServer.RegisterRouteGet(\"/index.html\", async arguments => { return new HttpResponse(await File.ReadAllTextAsync(\"index.html\"), HttpResponse.Type.Success); });","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab1/task3/#_3","text":"using System.Net; using System.Net.Sockets; using System.Text; namespace Server; class Program { static async Task Main(string[] args) { var listenPort = 22102; var socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp); socket.Bind(new IPEndPoint(IPAddress.Any, listenPort)); socket.Listen(10); var webServer = new WebServer(socket); webServer.RegisterRouteGet(\"/index.html\", async arguments => { return new HttpResponse(await File.ReadAllTextAsync(\"index.html\"), HttpResponse.Type.Success); }); while (true) { webServer.PollConnection(); webServer.PollRequests(); webServer.PollRequestProcessing(); } } private class WebServer { private readonly Socket _socket; private readonly Dictionary<EndPoint, Connection> _connections = new(); private readonly Dictionary<string, Func<Dictionary<string, string>, Task<HttpResponse>>> _routeHandlersGet = new(); private readonly Dictionary<string, Func<Dictionary<string, string>, Task<HttpResponse>>> _routeHandlersPost = new(); private bool _isWaitingForConnection; public WebServer(Socket socket) { _socket = socket; } public void PollConnection() { if (_isWaitingForConnection) return; _isWaitingForConnection = true; var socketAsyncEventArgs = new SocketAsyncEventArgs(); socketAsyncEventArgs.Completed += OnAccept; var isAsync = _socket.AcceptAsync(socketAsyncEventArgs); if (!isAsync) OnAccept(null, socketAsyncEventArgs); } public void PollRequests() { foreach (var connection in _connections.ToArray()) { var receivingTask = connection.Value.ReceivingTask; if (receivingTask is null) { receivingTask = connection.Value.Client.ReceiveAsync(connection.Value.Buffer); connection.Value.ReceivingTask = receivingTask; continue; } if (!receivingTask.IsCompleted) continue; connection.Value.ReceivingTask = null; try { try { var receivedBytesCount = receivingTask.Result; connection.Value.FlushToStream(receivedBytesCount); } catch (AggregateException e) { throw e.InnerException!; } } catch (SocketException e) { if (e.SocketErrorCode != SocketError.ConnectionReset) Console.WriteLine(e); connection.Value.Dispose(); _connections.Remove(connection.Key); } catch (Exception e) { Console.WriteLine(e); connection.Value.Dispose(); _connections.Remove(connection.Key); } } } public void PollRequestProcessing() { foreach (var connection in _connections.ToArray()) { var requestProcessingTask = connection.Value.RequestProcessingTask; if (requestProcessingTask is null) { connection.Value.RequestProcessingTask = ProcessRequest(connection.Value.RequestReader); continue; } if (!requestProcessingTask.IsCompleted) continue; connection.Value.RequestProcessingTask = null; connection.Value.ResetBuffer(); try { var response = requestProcessingTask.Result; connection.Value.Client.Send(response); } catch (Exception e) { Console.WriteLine(e); connection.Value.Dispose(); _connections.Remove(connection.Key); } } } public void RegisterRouteGet(string route, Func<Dictionary<string, string>, Task<HttpResponse>> handler) { _routeHandlersGet.Add(route, handler); } public void RegisterRoutePost(string route, Func<Dictionary<string, string>, Task<HttpResponse>> handler) { _routeHandlersPost.Add(route, handler); } private void OnAccept(object? sender, SocketAsyncEventArgs e) { if (e.SocketError != SocketError.Success) { Console.WriteLine(e.SocketError); return; } if (e.AcceptSocket == null) { Console.WriteLine(\"Accept socket is null\"); return; } var connection = new Connection(e.AcceptSocket); _connections.Add(connection.Client.RemoteEndPoint, connection); _isWaitingForConnection = false; } private async Task<byte[]> ProcessRequest(StreamReader connectionRequestReader) { var firstLine = await connectionRequestReader.ReadLineAsync(); if (firstLine == null) return Encoding.ASCII.GetBytes(\"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\"); var requestParts = firstLine.Split(' '); if (requestParts.Length != 3 || (requestParts[0] != \"GET\" && requestParts[0] != \"POST\")) return Encoding.ASCII.GetBytes(\"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\"); var pathAndArguments = requestParts[1].Split('?'); var path = pathAndArguments[0]; var headers = new List<string>(); var maxHeadersCount = 100; while (maxHeadersCount-- > 0) { var header = await connectionRequestReader.ReadLineAsync(); if (string.IsNullOrEmpty(header)) break; headers.Add(header); } if (maxHeadersCount == 0) return Encoding.ASCII.GetBytes(\"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\"); Func<Dictionary<string, string>, Task<HttpResponse>> handler = null; if (requestParts[0] == \"GET\" && !_routeHandlersGet.TryGetValue(path, out handler)) return Encoding.ASCII.GetBytes(\"HTTP/1.1 404 Not Found\\r\\nContent-Length: 0\\r\\n\\r\\n\"); if (requestParts[0] == \"POST\" && !_routeHandlersPost.TryGetValue(path, out handler)) return Encoding.ASCII.GetBytes(\"HTTP/1.1 404 Not Found\\r\\nContent-Length: 0\\r\\n\\r\\n\"); var argumentsRaw = pathAndArguments.Length > 1 ? pathAndArguments[1] : \"\"; var arguments = argumentsRaw.Split('&') .Where(e => !string.IsNullOrWhiteSpace(e)).Select(x => x.Split('=')) .ToDictionary(x => x[0], x => x[1]); try { Console.WriteLine($\"Processing request: {path} with method {requestParts[0]}\"); var response = await handler(arguments); return Encoding.ASCII.GetBytes( $\"HTTP/1.1 {response.GetStatusString()}\\r\\nContent-Length: {response.Content.Length}\\r\\n\\r\\n{response.Content}\"); } catch (Exception e) { Console.WriteLine(e); return Encoding.ASCII.GetBytes(\"HTTP/1.1 500 Internal Server Error\\r\\nContent-Length: 0\\r\\n\\r\\n\"); } } } private class Connection : IDisposable { public readonly Socket Client; public readonly byte[] Buffer = new byte[1024 * 8]; public readonly StreamReader RequestReader; public Task<int> ReceivingTask; public Task<byte[]> RequestProcessingTask; public int ReceivedBytesCount { get; private set; } private readonly ProducerConsumerStream _receivedStream; public Connection(Socket client) { Client = client; _receivedStream = new ProducerConsumerStream(); RequestReader = new StreamReader(_receivedStream, Encoding.ASCII); } public void FlushToStream(int count) { ReceivedBytesCount += count; _receivedStream.Write(Buffer, 0, count); _receivedStream.Flush(); } public void ResetBuffer() { Array.Clear(Buffer, 0, Buffer.Length); _receivedStream.Flush(); } public void Dispose() { try { Client.Dispose(); } catch (SocketException) { } } } public class HttpResponse { public string Content { get; } public Type Status { get; } public HttpResponse(string content, Type status) { Content = content; Status = status; } public string GetStatusString() { return Status switch { Type.Success => \"200 OK\", Type.BadRequest => \"400 Bad Request\", Type.NotFound => \"404 Not Found\", Type.InternalServerError => \"500 Internal Server Error\", _ => throw new ArgumentOutOfRangeException() }; } public enum Type { Success, BadRequest, NotFound, InternalServerError } } }","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430"},{"location":"lab1/task4/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading. \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b \u0412 \u043d\u0430\u0447\u0430\u043b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b \u0447\u0430\u0442 \u043d\u0430 http \u044f\u0434\u0440\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u0435\u043b\u0430\u043b \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0442\u0430\u0441\u043e\u043a, \u043d\u043e \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043f\u043e\u0432\u0435\u0440\u0445 tcp \u0441\u043e\u043a\u0435\u0442\u043e\u0432. \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u0441\u043e\u043a\u0435\u0442\u044b \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0447\u0435\u0440\u0435\u0437 \u043d\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u0442\u0440\u0435\u0434\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0430 \"\u0431\u0438\u0437\u043d\u0435\u0441 \u043b\u043e\u0433\u0438\u043a\u0430\" \u043f\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438 \u0432\u044b\u0431\u0438\u0440\u0430\u043d\u0438\u044e \u043a\u043e\u043c\u0443 \u0438\u0445 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0442\u0440\u0435\u0434\u0435. \u041d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0435 \u0441\u0430\u043c\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435\u0439 \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435 \u0442\u043e, \u0447\u0442\u043e \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044e, \u0430 \u0442\u0430\u043a \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u0435 \u043c\u0435\u0448\u0430\u043b\u0438 \u0432\u0432\u043e\u0434\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e \u0447\u0442\u043e \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0432\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u043b\u0441\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0442\u0440\u0430\u0448\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043a\u043e\u043d\u0441\u043e\u043b\u0438, \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0432\u0432\u043e\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u0431\u0443\u043a\u0432\u0430\u043c \u0438 \u0442\u0434. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0421\u0435\u0440\u0432\u0435\u0440 using System.Collections.Concurrent; using System.Diagnostics; using System.Diagnostics.CodeAnalysis; using System.Net; using System.Net.Sockets; using System.Text; using System.Text.Unicode; namespace Server; class Program { static async Task Main(string[] args) { var listenPort = 22102; var socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp); socket.Bind(new IPEndPoint(IPAddress.Any, listenPort)); socket.Listen(10); var webServer = new WebServer(socket); var packets = new List<WebServer.ReceivedPacket>(); while (true) { webServer.FlushPackets(packets); foreach (var packet in packets) { var sender = packet.Sender; var message = UTF32Encoding.UTF32.GetString(packet.Value); var fullMessageText = $\"{sender.Address}:{sender.Port} : {message}\"; Console.WriteLine(fullMessageText); var dataToSend = UTF32Encoding.UTF32.GetBytes(fullMessageText); webServer.SendPacket(ip => !Equals(ip, sender), dataToSend); } packets.Clear(); } } private class WebServer { private readonly Socket _socket; private readonly ConcurrentDictionary<EndPoint, Connection> _connections = new(); private readonly ConcurrentQueue<ReceivedPacket> _packets = new(); private bool _isWaitingForConnection; public WebServer(Socket socket) { _socket = socket; var thread = new Thread(() => { while (true) { PollConnections(); PoolSend(); PoolReceive(); } }); thread.Start(); } private void PollConnections() { if (_isWaitingForConnection) return; _isWaitingForConnection = true; var socketAsyncEventArgs = new SocketAsyncEventArgs(); socketAsyncEventArgs.Completed += OnAccept; var isAsync = _socket.AcceptAsync(socketAsyncEventArgs); if (!isAsync) OnAccept(null, socketAsyncEventArgs); } private void PoolSend() { foreach (var connection in _connections.Values) { try { if (connection.IsSending) connection.PollWrite(); } catch (SocketException e) { if (e.SocketErrorCode == SocketError.ConnectionReset) RemoveDisconnectedClient(connection); else throw; } if (!connection.Client.Connected) RemoveDisconnectedClient(connection); } } private void OnAccept(object? sender, SocketAsyncEventArgs e) { if (e.SocketError != SocketError.Success) { Console.WriteLine(e.SocketError); return; } if (e.AcceptSocket == null) { Console.WriteLine(\"Accept socket is null\"); return; } var connection = new Connection(e.AcceptSocket); connection.Client.ReceiveTimeout = 1; connection.Client.SendTimeout = 1; _connections.TryAdd(connection.Client.RemoteEndPoint, connection); _isWaitingForConnection = false; } public void FlushPackets(List<ReceivedPacket> packets) { while (_packets.TryDequeue(out var packet)) packets.Add(packet); } private void PoolReceive() { foreach (var connection in _connections.Values) { try { while (connection.PollRead(out var result)) _packets.Enqueue(new ReceivedPacket(connection.Client.RemoteEndPoint as IPEndPoint, result)); } catch (SocketException e) { if (e.SocketErrorCode == SocketError.ConnectionReset) RemoveDisconnectedClient(connection); else throw; } } } private void RemoveDisconnectedClient(Connection connection) { Console.WriteLine($\"Client {connection.Client.RemoteEndPoint} disconnected\"); _connections.TryRemove(connection.Client.RemoteEndPoint, out _); } public void SendPacket(Predicate<IPEndPoint> receiverFilter, Span<byte> data) { foreach (var connection in _connections.Values) { try { if (receiverFilter(connection.Client.RemoteEndPoint as IPEndPoint)) connection.Send(data); } catch (SocketException e) { if (e.SocketErrorCode == SocketError.ConnectionReset) RemoveDisconnectedClient(connection); else throw; } } } public class ReceivedPacket { public IPEndPoint Sender; public byte[] Value; public ReceivedPacket(IPEndPoint sender, byte[] value) { Sender = sender; Value = value; } } } private class Connection : IDisposable { private const int PacketHeaderSize = 2; public readonly Socket Client; public readonly byte[] ReceiveBuffer = new byte[1024 * 8]; public readonly byte[] SendBuffer = new byte[1024 * 8]; public bool IsSending => _sentBytes < _bytesToSent; private int _sentBytes; private int _bytesToSent; private int _bytesReceived; private int _bytesToReceive; public Connection(Socket client) { Client = client; } public void Send(Span<byte> data) { while (PollWrite()) Thread.Sleep(1); var size = (ushort)data.Length; SendBuffer[0] = (byte)(size & 0xFF); SendBuffer[1] = (byte)((size >> 8) & 0xFF); var sizeWithHeader = data.Length + PacketHeaderSize; if (sizeWithHeader > SendBuffer.Length) throw new InvalidOperationException(\"Data is too big\"); data.CopyTo(SendBuffer.AsSpan(PacketHeaderSize)); _bytesToSent = sizeWithHeader; _sentBytes = 0; } public bool PollWrite() { if (_sentBytes >= _bytesToSent) return false; try { var sentBytes = Client.Send(SendBuffer, _sentBytes, _bytesToSent - _sentBytes, SocketFlags.None); _sentBytes += sentBytes; return true; } catch (SocketException e) { if (e.SocketErrorCode != SocketError.TimedOut) throw; return false; } } public bool PollRead([MaybeNullWhen(false)] out byte[] result) { result = null; if (_bytesReceived < PacketHeaderSize) { try { _bytesReceived += Client.Receive(ReceiveBuffer, 0, PacketHeaderSize - _bytesReceived, SocketFlags.None); } catch (SocketException e) { if (e.SocketErrorCode != SocketError.TimedOut) throw; return false; } if (_bytesReceived < PacketHeaderSize) return false; var packetSize = ReceiveBuffer[0] | (ReceiveBuffer[1] << 8); _bytesToReceive = packetSize + PacketHeaderSize; } try { _bytesReceived += Client.Receive(ReceiveBuffer, _bytesReceived, _bytesToReceive - _bytesReceived, SocketFlags.None); } catch (SocketException e) { if (e.SocketErrorCode != SocketError.TimedOut) throw; return false; } if (_bytesReceived != _bytesToReceive) return false; result = new byte[_bytesToReceive - PacketHeaderSize]; Array.Copy(ReceiveBuffer, 2, result, 0, result.Length); _bytesReceived = 0; _bytesToReceive = 0; return true; } public void Dispose() { try { Client.Dispose(); } catch (SocketException) { } } } } \u041a\u043b\u0438\u0435\u043d\u0442 using System.Collections.Concurrent; using System.Diagnostics.CodeAnalysis; using System.Net; using System.Net.Sockets; using System.Text; namespace Server; class Program { static async Task Main(string[] args) { var listenPort = 22102; var socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp); socket.ReceiveTimeout = 1; socket.SendTimeout = 1; socket.Connect(IPAddress.Parse(\"127.0.0.1\"), listenPort); var connection = new Connection(socket); var messages = new ConcurrentQueue<string>(); var thread = new Thread(() => PollMessages(connection, messages)); thread.Start(); var userInputBuffer = new StringBuilder(); while (true) { while (messages.TryDequeue(out var result)) { // \u0412\u0441\u0451 \u044d\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0447\u0442\u043e\u0431\u044b \u0438\u043d\u043f\u0443\u0442 \u044e\u0437\u0435\u0440\u0430 \u0432\u0441\u0435\u0433\u0434\u0430 \u043e\u0441\u0442\u0430\u0432\u0430\u043b\u0441\u044f \u0441\u043d\u0438\u0437\u0443 var currentCursorPosition = Console.GetCursorPosition(); Console.SetCursorPosition(0, currentCursorPosition.Top); Console.Write(new string(' ', Console.BufferWidth)); Console.SetCursorPosition(0, currentCursorPosition.Top); Console.WriteLine(result); if (userInputBuffer.Length > 0) Console.Write(userInputBuffer.ToString()); } if (!Console.KeyAvailable) continue; var key = Console.ReadKey(true); if (key.Key == ConsoleKey.Enter) { var userInput = userInputBuffer.ToString(); var dataRaw = Encoding.UTF32.GetBytes(userInput); connection.Send(dataRaw); userInputBuffer.Clear(); Console.WriteLine(); } else { userInputBuffer.Append(key.KeyChar); Console.Write(key.KeyChar); } } } private static void PollMessages(Connection connection, ConcurrentQueue<string> messages) { while (true) { while (connection.PollRead(out var data)) { var message = UTF32Encoding.UTF32.GetString(data); messages.Enqueue(message); } while (connection.PollWrite()) Thread.Sleep(1); } } private class Connection : IDisposable { private const int PacketHeaderSize = 2; public readonly Socket Client; public readonly byte[] ReceiveBuffer = new byte[1024 * 8]; public readonly byte[] SendBuffer = new byte[1024 * 8]; private int _sentBytes; private int _bytesToSent; private int _bytesReceived; private int _bytesToReceive; public Connection(Socket client) { Client = client; } public void Send(Span<byte> data) { while (PollWrite()) Thread.Sleep(1); var size = (ushort)data.Length; SendBuffer[0] = (byte)(size & 0xFF); SendBuffer[1] = (byte)((size >> 8) & 0xFF); var sizeWithHeader = data.Length + PacketHeaderSize; if (sizeWithHeader > SendBuffer.Length) throw new InvalidOperationException(\"Data is too big\"); data.CopyTo(SendBuffer.AsSpan(PacketHeaderSize)); _bytesToSent = sizeWithHeader; _sentBytes = 0; } public bool PollWrite() { if (_sentBytes >= _bytesToSent) return false; try { var sentBytes = Client.Send(SendBuffer, _sentBytes, _bytesToSent - _sentBytes, SocketFlags.None); _sentBytes += sentBytes; return true; } catch (SocketException e) { if (e.SocketErrorCode != SocketError.TimedOut) throw; return false; } } public bool PollRead([MaybeNullWhen(false)] out byte[] result) { result = null; if (_bytesReceived < PacketHeaderSize) { try { _bytesReceived += Client.Receive(ReceiveBuffer, 0, PacketHeaderSize - _bytesReceived, SocketFlags.None); } catch (SocketException e) { if (e.SocketErrorCode != SocketError.TimedOut) throw; return false; } if (_bytesReceived < PacketHeaderSize) return false; var packetSize = ReceiveBuffer[0] | (ReceiveBuffer[1] << 8); _bytesToReceive = packetSize + PacketHeaderSize; } try { _bytesReceived += Client.Receive(ReceiveBuffer, _bytesReceived, _bytesToReceive - _bytesReceived, SocketFlags.None); } catch (SocketException e) { if (e.SocketErrorCode != SocketError.TimedOut) throw; return false; } if (_bytesReceived != _bytesToReceive) return false; result = new byte[_bytesToReceive - PacketHeaderSize]; Array.Copy(ReceiveBuffer, 2, result, 0, result.Length); _bytesReceived = 0; _bytesToReceive = 0; return true; } public void Dispose() { try { Client.Dispose(); } catch (SocketException) { } } } }","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"lab1/task4/#4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"lab1/task4/#_1","text":"\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading.","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"lab1/task4/#_2","text":"\u0412 \u043d\u0430\u0447\u0430\u043b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b \u0447\u0430\u0442 \u043d\u0430 http \u044f\u0434\u0440\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u0435\u043b\u0430\u043b \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0442\u0430\u0441\u043e\u043a, \u043d\u043e \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043f\u043e\u0432\u0435\u0440\u0445 tcp \u0441\u043e\u043a\u0435\u0442\u043e\u0432. \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u0441\u043e\u043a\u0435\u0442\u044b \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0447\u0435\u0440\u0435\u0437 \u043d\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u0442\u0440\u0435\u0434\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0430 \"\u0431\u0438\u0437\u043d\u0435\u0441 \u043b\u043e\u0433\u0438\u043a\u0430\" \u043f\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438 \u0432\u044b\u0431\u0438\u0440\u0430\u043d\u0438\u044e \u043a\u043e\u043c\u0443 \u0438\u0445 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0442\u0440\u0435\u0434\u0435. \u041d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0435 \u0441\u0430\u043c\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435\u0439 \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435 \u0442\u043e, \u0447\u0442\u043e \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044e, \u0430 \u0442\u0430\u043a \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u0435 \u043c\u0435\u0448\u0430\u043b\u0438 \u0432\u0432\u043e\u0434\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e \u0447\u0442\u043e \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0432\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u043b\u0441\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0442\u0440\u0430\u0448\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043a\u043e\u043d\u0441\u043e\u043b\u0438, \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0432\u0432\u043e\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u0431\u0443\u043a\u0432\u0430\u043c \u0438 \u0442\u0434.","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab1/task4/#_3","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430"},{"location":"lab1/task4/#_4","text":"using System.Collections.Concurrent; using System.Diagnostics; using System.Diagnostics.CodeAnalysis; using System.Net; using System.Net.Sockets; using System.Text; using System.Text.Unicode; namespace Server; class Program { static async Task Main(string[] args) { var listenPort = 22102; var socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp); socket.Bind(new IPEndPoint(IPAddress.Any, listenPort)); socket.Listen(10); var webServer = new WebServer(socket); var packets = new List<WebServer.ReceivedPacket>(); while (true) { webServer.FlushPackets(packets); foreach (var packet in packets) { var sender = packet.Sender; var message = UTF32Encoding.UTF32.GetString(packet.Value); var fullMessageText = $\"{sender.Address}:{sender.Port} : {message}\"; Console.WriteLine(fullMessageText); var dataToSend = UTF32Encoding.UTF32.GetBytes(fullMessageText); webServer.SendPacket(ip => !Equals(ip, sender), dataToSend); } packets.Clear(); } } private class WebServer { private readonly Socket _socket; private readonly ConcurrentDictionary<EndPoint, Connection> _connections = new(); private readonly ConcurrentQueue<ReceivedPacket> _packets = new(); private bool _isWaitingForConnection; public WebServer(Socket socket) { _socket = socket; var thread = new Thread(() => { while (true) { PollConnections(); PoolSend(); PoolReceive(); } }); thread.Start(); } private void PollConnections() { if (_isWaitingForConnection) return; _isWaitingForConnection = true; var socketAsyncEventArgs = new SocketAsyncEventArgs(); socketAsyncEventArgs.Completed += OnAccept; var isAsync = _socket.AcceptAsync(socketAsyncEventArgs); if (!isAsync) OnAccept(null, socketAsyncEventArgs); } private void PoolSend() { foreach (var connection in _connections.Values) { try { if (connection.IsSending) connection.PollWrite(); } catch (SocketException e) { if (e.SocketErrorCode == SocketError.ConnectionReset) RemoveDisconnectedClient(connection); else throw; } if (!connection.Client.Connected) RemoveDisconnectedClient(connection); } } private void OnAccept(object? sender, SocketAsyncEventArgs e) { if (e.SocketError != SocketError.Success) { Console.WriteLine(e.SocketError); return; } if (e.AcceptSocket == null) { Console.WriteLine(\"Accept socket is null\"); return; } var connection = new Connection(e.AcceptSocket); connection.Client.ReceiveTimeout = 1; connection.Client.SendTimeout = 1; _connections.TryAdd(connection.Client.RemoteEndPoint, connection); _isWaitingForConnection = false; } public void FlushPackets(List<ReceivedPacket> packets) { while (_packets.TryDequeue(out var packet)) packets.Add(packet); } private void PoolReceive() { foreach (var connection in _connections.Values) { try { while (connection.PollRead(out var result)) _packets.Enqueue(new ReceivedPacket(connection.Client.RemoteEndPoint as IPEndPoint, result)); } catch (SocketException e) { if (e.SocketErrorCode == SocketError.ConnectionReset) RemoveDisconnectedClient(connection); else throw; } } } private void RemoveDisconnectedClient(Connection connection) { Console.WriteLine($\"Client {connection.Client.RemoteEndPoint} disconnected\"); _connections.TryRemove(connection.Client.RemoteEndPoint, out _); } public void SendPacket(Predicate<IPEndPoint> receiverFilter, Span<byte> data) { foreach (var connection in _connections.Values) { try { if (receiverFilter(connection.Client.RemoteEndPoint as IPEndPoint)) connection.Send(data); } catch (SocketException e) { if (e.SocketErrorCode == SocketError.ConnectionReset) RemoveDisconnectedClient(connection); else throw; } } } public class ReceivedPacket { public IPEndPoint Sender; public byte[] Value; public ReceivedPacket(IPEndPoint sender, byte[] value) { Sender = sender; Value = value; } } } private class Connection : IDisposable { private const int PacketHeaderSize = 2; public readonly Socket Client; public readonly byte[] ReceiveBuffer = new byte[1024 * 8]; public readonly byte[] SendBuffer = new byte[1024 * 8]; public bool IsSending => _sentBytes < _bytesToSent; private int _sentBytes; private int _bytesToSent; private int _bytesReceived; private int _bytesToReceive; public Connection(Socket client) { Client = client; } public void Send(Span<byte> data) { while (PollWrite()) Thread.Sleep(1); var size = (ushort)data.Length; SendBuffer[0] = (byte)(size & 0xFF); SendBuffer[1] = (byte)((size >> 8) & 0xFF); var sizeWithHeader = data.Length + PacketHeaderSize; if (sizeWithHeader > SendBuffer.Length) throw new InvalidOperationException(\"Data is too big\"); data.CopyTo(SendBuffer.AsSpan(PacketHeaderSize)); _bytesToSent = sizeWithHeader; _sentBytes = 0; } public bool PollWrite() { if (_sentBytes >= _bytesToSent) return false; try { var sentBytes = Client.Send(SendBuffer, _sentBytes, _bytesToSent - _sentBytes, SocketFlags.None); _sentBytes += sentBytes; return true; } catch (SocketException e) { if (e.SocketErrorCode != SocketError.TimedOut) throw; return false; } } public bool PollRead([MaybeNullWhen(false)] out byte[] result) { result = null; if (_bytesReceived < PacketHeaderSize) { try { _bytesReceived += Client.Receive(ReceiveBuffer, 0, PacketHeaderSize - _bytesReceived, SocketFlags.None); } catch (SocketException e) { if (e.SocketErrorCode != SocketError.TimedOut) throw; return false; } if (_bytesReceived < PacketHeaderSize) return false; var packetSize = ReceiveBuffer[0] | (ReceiveBuffer[1] << 8); _bytesToReceive = packetSize + PacketHeaderSize; } try { _bytesReceived += Client.Receive(ReceiveBuffer, _bytesReceived, _bytesToReceive - _bytesReceived, SocketFlags.None); } catch (SocketException e) { if (e.SocketErrorCode != SocketError.TimedOut) throw; return false; } if (_bytesReceived != _bytesToReceive) return false; result = new byte[_bytesToReceive - PacketHeaderSize]; Array.Copy(ReceiveBuffer, 2, result, 0, result.Length); _bytesReceived = 0; _bytesToReceive = 0; return true; } public void Dispose() { try { Client.Dispose(); } catch (SocketException) { } } } }","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"lab1/task4/#_5","text":"using System.Collections.Concurrent; using System.Diagnostics.CodeAnalysis; using System.Net; using System.Net.Sockets; using System.Text; namespace Server; class Program { static async Task Main(string[] args) { var listenPort = 22102; var socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp); socket.ReceiveTimeout = 1; socket.SendTimeout = 1; socket.Connect(IPAddress.Parse(\"127.0.0.1\"), listenPort); var connection = new Connection(socket); var messages = new ConcurrentQueue<string>(); var thread = new Thread(() => PollMessages(connection, messages)); thread.Start(); var userInputBuffer = new StringBuilder(); while (true) { while (messages.TryDequeue(out var result)) { // \u0412\u0441\u0451 \u044d\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0447\u0442\u043e\u0431\u044b \u0438\u043d\u043f\u0443\u0442 \u044e\u0437\u0435\u0440\u0430 \u0432\u0441\u0435\u0433\u0434\u0430 \u043e\u0441\u0442\u0430\u0432\u0430\u043b\u0441\u044f \u0441\u043d\u0438\u0437\u0443 var currentCursorPosition = Console.GetCursorPosition(); Console.SetCursorPosition(0, currentCursorPosition.Top); Console.Write(new string(' ', Console.BufferWidth)); Console.SetCursorPosition(0, currentCursorPosition.Top); Console.WriteLine(result); if (userInputBuffer.Length > 0) Console.Write(userInputBuffer.ToString()); } if (!Console.KeyAvailable) continue; var key = Console.ReadKey(true); if (key.Key == ConsoleKey.Enter) { var userInput = userInputBuffer.ToString(); var dataRaw = Encoding.UTF32.GetBytes(userInput); connection.Send(dataRaw); userInputBuffer.Clear(); Console.WriteLine(); } else { userInputBuffer.Append(key.KeyChar); Console.Write(key.KeyChar); } } } private static void PollMessages(Connection connection, ConcurrentQueue<string> messages) { while (true) { while (connection.PollRead(out var data)) { var message = UTF32Encoding.UTF32.GetString(data); messages.Enqueue(message); } while (connection.PollWrite()) Thread.Sleep(1); } } private class Connection : IDisposable { private const int PacketHeaderSize = 2; public readonly Socket Client; public readonly byte[] ReceiveBuffer = new byte[1024 * 8]; public readonly byte[] SendBuffer = new byte[1024 * 8]; private int _sentBytes; private int _bytesToSent; private int _bytesReceived; private int _bytesToReceive; public Connection(Socket client) { Client = client; } public void Send(Span<byte> data) { while (PollWrite()) Thread.Sleep(1); var size = (ushort)data.Length; SendBuffer[0] = (byte)(size & 0xFF); SendBuffer[1] = (byte)((size >> 8) & 0xFF); var sizeWithHeader = data.Length + PacketHeaderSize; if (sizeWithHeader > SendBuffer.Length) throw new InvalidOperationException(\"Data is too big\"); data.CopyTo(SendBuffer.AsSpan(PacketHeaderSize)); _bytesToSent = sizeWithHeader; _sentBytes = 0; } public bool PollWrite() { if (_sentBytes >= _bytesToSent) return false; try { var sentBytes = Client.Send(SendBuffer, _sentBytes, _bytesToSent - _sentBytes, SocketFlags.None); _sentBytes += sentBytes; return true; } catch (SocketException e) { if (e.SocketErrorCode != SocketError.TimedOut) throw; return false; } } public bool PollRead([MaybeNullWhen(false)] out byte[] result) { result = null; if (_bytesReceived < PacketHeaderSize) { try { _bytesReceived += Client.Receive(ReceiveBuffer, 0, PacketHeaderSize - _bytesReceived, SocketFlags.None); } catch (SocketException e) { if (e.SocketErrorCode != SocketError.TimedOut) throw; return false; } if (_bytesReceived < PacketHeaderSize) return false; var packetSize = ReceiveBuffer[0] | (ReceiveBuffer[1] << 8); _bytesToReceive = packetSize + PacketHeaderSize; } try { _bytesReceived += Client.Receive(ReceiveBuffer, _bytesReceived, _bytesToReceive - _bytesReceived, SocketFlags.None); } catch (SocketException e) { if (e.SocketErrorCode != SocketError.TimedOut) throw; return false; } if (_bytesReceived != _bytesToReceive) return false; result = new byte[_bytesToReceive - PacketHeaderSize]; Array.Copy(ReceiveBuffer, 2, result, 0, result.Length); _bytesReceived = 0; _bytesToReceive = 0; return true; } public void Dispose() { try { Client.Dispose(); } catch (SocketException) { } } } }","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"lab1/task5/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python. \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: - \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. - \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0434\u0435\u0441\u044c \u043d\u0435 \u043d\u0443\u0436\u0435\u043d, \u0442\u0430\u043a \u043a\u0430\u043a \u0432 \u0435\u0433\u043e \u0440\u043e\u043b\u0438 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0432\u0441\u0451, \u0447\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, Postman. \u0417\u0434\u0435\u0441\u044c \u044f \u0441\u0434\u0435\u043b\u0430\u043b \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043c\u0438\u043d\u0438-\u044f\u0434\u0440\u043e \u0434\u043b\u044f http \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u044f \u043f\u043e \u0438\u0442\u043e\u0433\u0443 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b 3, 4 \u0438 5 \u0437\u0430\u0434\u0430\u043d\u0438\u044f. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0437 url \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u0442\u0443\u0434\u0430, \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u0440\u0430\u0437\u043d\u044b\u043c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430\u043c \u043f\u043e \u0440\u0430\u0437\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u0430\u043c (\u0442\u043e\u043b\u044c\u043a\u043e Get \u0438 Post), \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u0441 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u043c\u0438 \u0441\u0442\u0430\u0442\u0443\u0441 \u043a\u043e\u0434\u0430\u043c\u0438. \u041a\u0440\u043e\u043c\u0435 \u043a\u043e\u0434\u0430 \u044f\u0434\u0440\u0430 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u043b\u043e\u0441\u044c \u0442\u043e\u043b\u044c\u043a\u043e: var marks = new List<Mark>(); webServer.RegisterRoutePost(\"/mark\", async arguments => { if (!arguments.TryGetValue(\"discipline\", out var text) || string.IsNullOrWhiteSpace(text)) return new HttpResponse(\"\", HttpResponse.Type.BadRequest); if (!arguments.TryGetValue(\"mark\", out var author) || string.IsNullOrWhiteSpace(author)) return new HttpResponse(\"\", HttpResponse.Type.BadRequest); marks.Add(new() { Discipline = text, MarkValue = author }); return new HttpResponse(\"\", HttpResponse.Type.Success); }); webServer.RegisterRouteGet(\"/marks\", async arguments => { var htmlTemplatePage = File.ReadAllText(\"index.html\"); htmlTemplatePage = htmlTemplatePage.Replace(\"$$$$$$\", marks.Select(e => $\"<li>Discipline {e.Discipline}: {e.MarkValue}</li>\").Aggregate((a, b) => a + b)); return new HttpResponse(htmlTemplatePage, HttpResponse.Type.Success); }); \u0412\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432 \u0448\u0430\u0431\u043b\u043e\u043d \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f \u0438\u0437 \u0444\u0430\u0439\u043b\u0430, \u0438 \u044d\u0442\u043e \u0432\u0441\u0451 \u043e\u0442\u0434\u0430\u0451\u0442\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0443. Server-side rendering, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 using System.Net; using System.Net.Sockets; using System.Text; using System.Text.Json; namespace Server; class Program { static async Task Main(string[] args) { var listenPort = 22102; var socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp); socket.Bind(new IPEndPoint(IPAddress.Any, listenPort)); socket.Listen(10); var webServer = new WebServer(socket); var marks = new List<Mark>(); webServer.RegisterRoutePost(\"/mark\", async arguments => { if (!arguments.TryGetValue(\"discipline\", out var text) || string.IsNullOrWhiteSpace(text)) return new HttpResponse(\"\", HttpResponse.Type.BadRequest); if (!arguments.TryGetValue(\"mark\", out var author) || string.IsNullOrWhiteSpace(author)) return new HttpResponse(\"\", HttpResponse.Type.BadRequest); marks.Add(new() { Discipline = text, MarkValue = author }); return new HttpResponse(\"\", HttpResponse.Type.Success); }); webServer.RegisterRouteGet(\"/marks\", async arguments => { var htmlTemplatePage = File.ReadAllText(\"index.html\"); htmlTemplatePage = htmlTemplatePage.Replace(\"$$$$$$\", marks.Select(e => $\"<li>Discipline {e.Discipline}: {e.MarkValue}</li>\").Aggregate((a, b) => a + b)); return new HttpResponse(htmlTemplatePage, HttpResponse.Type.Success); }); while (true) { webServer.PollConnection(); webServer.PollRequests(); webServer.PollRequestProcessing(); } } public class Mark { public string Discipline { get; set; } public string MarkValue { get; set; } } private class WebServer { private readonly Socket _socket; private readonly Dictionary<EndPoint, Connection> _connections = new(); private readonly Dictionary<string, Func<Dictionary<string, string>, Task<HttpResponse>>> _routeHandlersGet = new(); private readonly Dictionary<string, Func<Dictionary<string, string>, Task<HttpResponse>>> _routeHandlersPost = new(); private bool _isWaitingForConnection; public WebServer(Socket socket) { _socket = socket; } public void PollConnection() { if (_isWaitingForConnection) return; _isWaitingForConnection = true; var socketAsyncEventArgs = new SocketAsyncEventArgs(); socketAsyncEventArgs.Completed += OnAccept; var isAsync = _socket.AcceptAsync(socketAsyncEventArgs); if (!isAsync) OnAccept(null, socketAsyncEventArgs); } public void PollRequests() { foreach (var connection in _connections.ToArray()) { var receivingTask = connection.Value.ReceivingTask; if (receivingTask is null) { receivingTask = connection.Value.Client.ReceiveAsync(connection.Value.Buffer); connection.Value.ReceivingTask = receivingTask; continue; } if (!receivingTask.IsCompleted) continue; connection.Value.ReceivingTask = null; try { try { var receivedBytesCount = receivingTask.Result; connection.Value.FlushToStream(receivedBytesCount); } catch (AggregateException e) { throw e.InnerException!; } } catch (SocketException e) { if (e.SocketErrorCode != SocketError.ConnectionReset) Console.WriteLine(e); connection.Value.Dispose(); _connections.Remove(connection.Key); } catch (Exception e) { Console.WriteLine(e); connection.Value.Dispose(); _connections.Remove(connection.Key); } } } public void PollRequestProcessing() { foreach (var connection in _connections.ToArray()) { var requestProcessingTask = connection.Value.RequestProcessingTask; if (requestProcessingTask is null) { connection.Value.RequestProcessingTask = ProcessRequest(connection.Value.RequestReader); continue; } if (!requestProcessingTask.IsCompleted) continue; connection.Value.RequestProcessingTask = null; connection.Value.ResetBuffer(); try { var response = requestProcessingTask.Result; connection.Value.Client.Send(response); } catch (Exception e) { Console.WriteLine(e); connection.Value.Dispose(); _connections.Remove(connection.Key); } } } public void RegisterRouteGet(string route, Func<Dictionary<string, string>, Task<HttpResponse>> handler) { _routeHandlersGet.Add(route, handler); } public void RegisterRoutePost(string route, Func<Dictionary<string, string>, Task<HttpResponse>> handler) { _routeHandlersPost.Add(route, handler); } private void OnAccept(object? sender, SocketAsyncEventArgs e) { if (e.SocketError != SocketError.Success) { Console.WriteLine(e.SocketError); return; } if (e.AcceptSocket == null) { Console.WriteLine(\"Accept socket is null\"); return; } var connection = new Connection(e.AcceptSocket); _connections.Add(connection.Client.RemoteEndPoint, connection); _isWaitingForConnection = false; } private async Task<byte[]> ProcessRequest(StreamReader connectionRequestReader) { var firstLine = await connectionRequestReader.ReadLineAsync(); if (firstLine == null) return Encoding.ASCII.GetBytes(\"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\"); var requestParts = firstLine.Split(' '); if (requestParts.Length != 3 || (requestParts[0] != \"GET\" && requestParts[0] != \"POST\")) return Encoding.ASCII.GetBytes(\"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\"); var pathAndArguments = requestParts[1].Split('?'); var path = pathAndArguments[0]; var headers = new List<string>(); var maxHeadersCount = 100; while (maxHeadersCount-- > 0) { var header = await connectionRequestReader.ReadLineAsync(); if (string.IsNullOrEmpty(header)) break; headers.Add(header); } if (maxHeadersCount == 0) return Encoding.ASCII.GetBytes(\"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\"); Func<Dictionary<string, string>, Task<HttpResponse>> handler = null; if (requestParts[0] == \"GET\" && !_routeHandlersGet.TryGetValue(path, out handler)) return Encoding.ASCII.GetBytes(\"HTTP/1.1 404 Not Found\\r\\nContent-Length: 0\\r\\n\\r\\n\"); if (requestParts[0] == \"POST\" && !_routeHandlersPost.TryGetValue(path, out handler)) return Encoding.ASCII.GetBytes(\"HTTP/1.1 404 Not Found\\r\\nContent-Length: 0\\r\\n\\r\\n\"); var argumentsRaw = pathAndArguments.Length > 1 ? pathAndArguments[1] : \"\"; var arguments = argumentsRaw.Split('&') .Where(e => !string.IsNullOrWhiteSpace(e)).Select(x => x.Split('=')) .ToDictionary(x => x[0], x => x[1]); try { Console.WriteLine($\"Processing request: {path} with method {requestParts[0]}\"); var response = await handler(arguments); return Encoding.ASCII.GetBytes( $\"HTTP/1.1 {response.GetStatusString()}\\r\\nContent-Length: {response.Content.Length}\\r\\n\\r\\n{response.Content}\"); } catch (Exception e) { Console.WriteLine(e); return Encoding.ASCII.GetBytes(\"HTTP/1.1 500 Internal Server Error\\r\\nContent-Length: 0\\r\\n\\r\\n\"); } } } private class Connection : IDisposable { public readonly Socket Client; public readonly byte[] Buffer = new byte[1024 * 8]; public readonly StreamReader RequestReader; public Task<int> ReceivingTask; public Task<byte[]> RequestProcessingTask; public int ReceivedBytesCount { get; private set; } private readonly ProducerConsumerStream _receivedStream; public Connection(Socket client) { Client = client; _receivedStream = new ProducerConsumerStream(); RequestReader = new StreamReader(_receivedStream, Encoding.ASCII); } public void FlushToStream(int count) { ReceivedBytesCount += count; _receivedStream.Write(Buffer, 0, count); _receivedStream.Flush(); } public void ResetBuffer() { Array.Clear(Buffer, 0, Buffer.Length); _receivedStream.Flush(); } public void Dispose() { try { Client.Dispose(); } catch (SocketException) { } } } public class HttpResponse { public string Content { get; } public Type Status { get; } public HttpResponse(string content, Type status) { Content = content; Status = status; } public string GetStatusString() { return Status switch { Type.Success => \"200 OK\", Type.BadRequest => \"400 Bad Request\", Type.NotFound => \"404 Not Found\", Type.InternalServerError => \"500 Internal Server Error\", _ => throw new ArgumentOutOfRangeException() }; } public enum Type { Success, BadRequest, NotFound, InternalServerError } } }","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"lab1/task5/#5","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python. \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: - \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. - \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"lab1/task5/#_1","text":"\u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0434\u0435\u0441\u044c \u043d\u0435 \u043d\u0443\u0436\u0435\u043d, \u0442\u0430\u043a \u043a\u0430\u043a \u0432 \u0435\u0433\u043e \u0440\u043e\u043b\u0438 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0432\u0441\u0451, \u0447\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, Postman. \u0417\u0434\u0435\u0441\u044c \u044f \u0441\u0434\u0435\u043b\u0430\u043b \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043c\u0438\u043d\u0438-\u044f\u0434\u0440\u043e \u0434\u043b\u044f http \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u044f \u043f\u043e \u0438\u0442\u043e\u0433\u0443 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b 3, 4 \u0438 5 \u0437\u0430\u0434\u0430\u043d\u0438\u044f. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0437 url \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u0442\u0443\u0434\u0430, \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u0440\u0430\u0437\u043d\u044b\u043c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430\u043c \u043f\u043e \u0440\u0430\u0437\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u0430\u043c (\u0442\u043e\u043b\u044c\u043a\u043e Get \u0438 Post), \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u0441 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u043c\u0438 \u0441\u0442\u0430\u0442\u0443\u0441 \u043a\u043e\u0434\u0430\u043c\u0438. \u041a\u0440\u043e\u043c\u0435 \u043a\u043e\u0434\u0430 \u044f\u0434\u0440\u0430 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u043b\u043e\u0441\u044c \u0442\u043e\u043b\u044c\u043a\u043e: var marks = new List<Mark>(); webServer.RegisterRoutePost(\"/mark\", async arguments => { if (!arguments.TryGetValue(\"discipline\", out var text) || string.IsNullOrWhiteSpace(text)) return new HttpResponse(\"\", HttpResponse.Type.BadRequest); if (!arguments.TryGetValue(\"mark\", out var author) || string.IsNullOrWhiteSpace(author)) return new HttpResponse(\"\", HttpResponse.Type.BadRequest); marks.Add(new() { Discipline = text, MarkValue = author }); return new HttpResponse(\"\", HttpResponse.Type.Success); }); webServer.RegisterRouteGet(\"/marks\", async arguments => { var htmlTemplatePage = File.ReadAllText(\"index.html\"); htmlTemplatePage = htmlTemplatePage.Replace(\"$$$$$$\", marks.Select(e => $\"<li>Discipline {e.Discipline}: {e.MarkValue}</li>\").Aggregate((a, b) => a + b)); return new HttpResponse(htmlTemplatePage, HttpResponse.Type.Success); }); \u0412\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432 \u0448\u0430\u0431\u043b\u043e\u043d \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442\u0441\u044f \u0438\u0437 \u0444\u0430\u0439\u043b\u0430, \u0438 \u044d\u0442\u043e \u0432\u0441\u0451 \u043e\u0442\u0434\u0430\u0451\u0442\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0443. Server-side rendering, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f.","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab1/task5/#_2","text":"using System.Net; using System.Net.Sockets; using System.Text; using System.Text.Json; namespace Server; class Program { static async Task Main(string[] args) { var listenPort = 22102; var socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp); socket.Bind(new IPEndPoint(IPAddress.Any, listenPort)); socket.Listen(10); var webServer = new WebServer(socket); var marks = new List<Mark>(); webServer.RegisterRoutePost(\"/mark\", async arguments => { if (!arguments.TryGetValue(\"discipline\", out var text) || string.IsNullOrWhiteSpace(text)) return new HttpResponse(\"\", HttpResponse.Type.BadRequest); if (!arguments.TryGetValue(\"mark\", out var author) || string.IsNullOrWhiteSpace(author)) return new HttpResponse(\"\", HttpResponse.Type.BadRequest); marks.Add(new() { Discipline = text, MarkValue = author }); return new HttpResponse(\"\", HttpResponse.Type.Success); }); webServer.RegisterRouteGet(\"/marks\", async arguments => { var htmlTemplatePage = File.ReadAllText(\"index.html\"); htmlTemplatePage = htmlTemplatePage.Replace(\"$$$$$$\", marks.Select(e => $\"<li>Discipline {e.Discipline}: {e.MarkValue}</li>\").Aggregate((a, b) => a + b)); return new HttpResponse(htmlTemplatePage, HttpResponse.Type.Success); }); while (true) { webServer.PollConnection(); webServer.PollRequests(); webServer.PollRequestProcessing(); } } public class Mark { public string Discipline { get; set; } public string MarkValue { get; set; } } private class WebServer { private readonly Socket _socket; private readonly Dictionary<EndPoint, Connection> _connections = new(); private readonly Dictionary<string, Func<Dictionary<string, string>, Task<HttpResponse>>> _routeHandlersGet = new(); private readonly Dictionary<string, Func<Dictionary<string, string>, Task<HttpResponse>>> _routeHandlersPost = new(); private bool _isWaitingForConnection; public WebServer(Socket socket) { _socket = socket; } public void PollConnection() { if (_isWaitingForConnection) return; _isWaitingForConnection = true; var socketAsyncEventArgs = new SocketAsyncEventArgs(); socketAsyncEventArgs.Completed += OnAccept; var isAsync = _socket.AcceptAsync(socketAsyncEventArgs); if (!isAsync) OnAccept(null, socketAsyncEventArgs); } public void PollRequests() { foreach (var connection in _connections.ToArray()) { var receivingTask = connection.Value.ReceivingTask; if (receivingTask is null) { receivingTask = connection.Value.Client.ReceiveAsync(connection.Value.Buffer); connection.Value.ReceivingTask = receivingTask; continue; } if (!receivingTask.IsCompleted) continue; connection.Value.ReceivingTask = null; try { try { var receivedBytesCount = receivingTask.Result; connection.Value.FlushToStream(receivedBytesCount); } catch (AggregateException e) { throw e.InnerException!; } } catch (SocketException e) { if (e.SocketErrorCode != SocketError.ConnectionReset) Console.WriteLine(e); connection.Value.Dispose(); _connections.Remove(connection.Key); } catch (Exception e) { Console.WriteLine(e); connection.Value.Dispose(); _connections.Remove(connection.Key); } } } public void PollRequestProcessing() { foreach (var connection in _connections.ToArray()) { var requestProcessingTask = connection.Value.RequestProcessingTask; if (requestProcessingTask is null) { connection.Value.RequestProcessingTask = ProcessRequest(connection.Value.RequestReader); continue; } if (!requestProcessingTask.IsCompleted) continue; connection.Value.RequestProcessingTask = null; connection.Value.ResetBuffer(); try { var response = requestProcessingTask.Result; connection.Value.Client.Send(response); } catch (Exception e) { Console.WriteLine(e); connection.Value.Dispose(); _connections.Remove(connection.Key); } } } public void RegisterRouteGet(string route, Func<Dictionary<string, string>, Task<HttpResponse>> handler) { _routeHandlersGet.Add(route, handler); } public void RegisterRoutePost(string route, Func<Dictionary<string, string>, Task<HttpResponse>> handler) { _routeHandlersPost.Add(route, handler); } private void OnAccept(object? sender, SocketAsyncEventArgs e) { if (e.SocketError != SocketError.Success) { Console.WriteLine(e.SocketError); return; } if (e.AcceptSocket == null) { Console.WriteLine(\"Accept socket is null\"); return; } var connection = new Connection(e.AcceptSocket); _connections.Add(connection.Client.RemoteEndPoint, connection); _isWaitingForConnection = false; } private async Task<byte[]> ProcessRequest(StreamReader connectionRequestReader) { var firstLine = await connectionRequestReader.ReadLineAsync(); if (firstLine == null) return Encoding.ASCII.GetBytes(\"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\"); var requestParts = firstLine.Split(' '); if (requestParts.Length != 3 || (requestParts[0] != \"GET\" && requestParts[0] != \"POST\")) return Encoding.ASCII.GetBytes(\"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\"); var pathAndArguments = requestParts[1].Split('?'); var path = pathAndArguments[0]; var headers = new List<string>(); var maxHeadersCount = 100; while (maxHeadersCount-- > 0) { var header = await connectionRequestReader.ReadLineAsync(); if (string.IsNullOrEmpty(header)) break; headers.Add(header); } if (maxHeadersCount == 0) return Encoding.ASCII.GetBytes(\"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\"); Func<Dictionary<string, string>, Task<HttpResponse>> handler = null; if (requestParts[0] == \"GET\" && !_routeHandlersGet.TryGetValue(path, out handler)) return Encoding.ASCII.GetBytes(\"HTTP/1.1 404 Not Found\\r\\nContent-Length: 0\\r\\n\\r\\n\"); if (requestParts[0] == \"POST\" && !_routeHandlersPost.TryGetValue(path, out handler)) return Encoding.ASCII.GetBytes(\"HTTP/1.1 404 Not Found\\r\\nContent-Length: 0\\r\\n\\r\\n\"); var argumentsRaw = pathAndArguments.Length > 1 ? pathAndArguments[1] : \"\"; var arguments = argumentsRaw.Split('&') .Where(e => !string.IsNullOrWhiteSpace(e)).Select(x => x.Split('=')) .ToDictionary(x => x[0], x => x[1]); try { Console.WriteLine($\"Processing request: {path} with method {requestParts[0]}\"); var response = await handler(arguments); return Encoding.ASCII.GetBytes( $\"HTTP/1.1 {response.GetStatusString()}\\r\\nContent-Length: {response.Content.Length}\\r\\n\\r\\n{response.Content}\"); } catch (Exception e) { Console.WriteLine(e); return Encoding.ASCII.GetBytes(\"HTTP/1.1 500 Internal Server Error\\r\\nContent-Length: 0\\r\\n\\r\\n\"); } } } private class Connection : IDisposable { public readonly Socket Client; public readonly byte[] Buffer = new byte[1024 * 8]; public readonly StreamReader RequestReader; public Task<int> ReceivingTask; public Task<byte[]> RequestProcessingTask; public int ReceivedBytesCount { get; private set; } private readonly ProducerConsumerStream _receivedStream; public Connection(Socket client) { Client = client; _receivedStream = new ProducerConsumerStream(); RequestReader = new StreamReader(_receivedStream, Encoding.ASCII); } public void FlushToStream(int count) { ReceivedBytesCount += count; _receivedStream.Write(Buffer, 0, count); _receivedStream.Flush(); } public void ResetBuffer() { Array.Clear(Buffer, 0, Buffer.Length); _receivedStream.Flush(); } public void Dispose() { try { Client.Dispose(); } catch (SocketException) { } } } public class HttpResponse { public string Content { get; } public Type Status { get; } public HttpResponse(string content, Type status) { Content = content; Status = status; } public string GetStatusString() { return Status switch { Type.Success => \"200 OK\", Type.BadRequest => \"400 Bad Request\", Type.NotFound => \"404 Not Found\", Type.InternalServerError => \"500 Internal Server Error\", _ => throw new ArgumentOutOfRangeException() }; } public enum Type { Success, BadRequest, NotFound, InternalServerError } } }","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430"}]}